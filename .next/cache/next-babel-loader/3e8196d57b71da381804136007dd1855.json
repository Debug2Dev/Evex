{"ast":null,"code":"const i18n = require('i18next');\n\nconst XHR = require('i18next-xhr-backend');\n\nconst LanguageDetector = require('i18next-browser-languagedetector');\n\nconst options = {\n  fallbackLng: 'en',\n  load: 'languageOnly',\n  // we only provide en, de -> no region specific locals like en-US, de-DE\n  // have a common namespace used around the full app\n  ns: ['common'],\n  defaultNS: 'common',\n  debug: true,\n  // process.env.NODE_ENV !== 'production',\n  saveMissing: true,\n  interpolation: {\n    escapeValue: false,\n    // not needed for react!!\n    formatSeparator: ',',\n    format: (value, format, lng) => {\n      if (format === 'uppercase') return value.toUpperCase();\n      return value;\n    }\n  }\n}; // for browser use xhr backend to load translations and browser lng detector\n\nif (process.browser) {\n  i18n.use(XHR) // .use(Cache)\n  .use(LanguageDetector);\n} // initialize if not already initialized\n\n\nif (!i18n.isInitialized) i18n.init(options); // a simple helper to getInitialProps passed on loaded i18n data\n\ni18n.getInitialProps = (req, namespaces) => {\n  if (!namespaces) namespaces = i18n.options.defaultNS;\n  if (typeof namespaces === 'string') namespaces = [namespaces];\n\n  req.i18n.toJSON = () => {}; // do not serialize i18next instance to prevent circular references on the client\n\n\n  const initialI18nStore = {};\n  req.i18n.languages.forEach(l => {\n    initialI18nStore[l] = {};\n    namespaces.forEach(ns => {\n      initialI18nStore[l][ns] = (req.i18n.services.resourceStore.data[l] || {})[ns] || {};\n    });\n  });\n  return {\n    i18n: req.i18n,\n    // use the instance on req - fixed language on request (avoid issues in race conditions with lngs of different users)\n    initialI18nStore,\n    initialLanguage: req.i18n.language\n  };\n};\n\nmodule.exports = i18n;","map":{"version":3,"sources":["/Users/manivannan/Documents/sample-app/reactjs/evex/i18n.js"],"names":["i18n","require","XHR","LanguageDetector","options","fallbackLng","load","ns","defaultNS","debug","saveMissing","interpolation","escapeValue","formatSeparator","format","value","lng","toUpperCase","process","browser","use","isInitialized","init","getInitialProps","req","namespaces","toJSON","initialI18nStore","languages","forEach","l","services","resourceStore","data","initialLanguage","language","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,qBAAD,CAAnB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kCAAD,CAAhC;;AAEA,MAAMG,OAAO,GAAG;AACdC,EAAAA,WAAW,EAAE,IADC;AAEdC,EAAAA,IAAI,EAAE,cAFQ;AAEQ;AAEtB;AACAC,EAAAA,EAAE,EAAE,CAAC,QAAD,CALU;AAMdC,EAAAA,SAAS,EAAE,QANG;AAQdC,EAAAA,KAAK,EAAE,IARO;AAQD;AACbC,EAAAA,WAAW,EAAE,IATC;AAWdC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA;AACO;AACpBC,IAAAA,eAAe,EAAE,GAFJ;AAGbC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQD,MAAR,EAAgBE,GAAhB,KAAwB;AAC9B,UAAIF,MAAM,KAAK,WAAf,EAA4B,OAAOC,KAAK,CAACE,WAAN,EAAP;AAC5B,aAAOF,KAAP;AACD;AANY;AAXD,CAAhB,C,CAqBA;;AACA,IAAIG,OAAO,CAACC,OAAZ,EAAqB;AACnBnB,EAAAA,IAAI,CACDoB,GADH,CACOlB,GADP,EAEE;AAFF,GAGGkB,GAHH,CAGOjB,gBAHP;AAID,C,CAED;;;AACA,IAAI,CAACH,IAAI,CAACqB,aAAV,EAAyBrB,IAAI,CAACsB,IAAL,CAAUlB,OAAV,E,CAEzB;;AACAJ,IAAI,CAACuB,eAAL,GAAuB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC1C,MAAI,CAACA,UAAL,EAAiBA,UAAU,GAAGzB,IAAI,CAACI,OAAL,CAAaI,SAA1B;AACjB,MAAI,OAAOiB,UAAP,KAAsB,QAA1B,EAAoCA,UAAU,GAAG,CAACA,UAAD,CAAb;;AAEpCD,EAAAA,GAAG,CAACxB,IAAJ,CAAS0B,MAAT,GAAkB,MAAM,CAAE,CAA1B,CAJ0C,CAIf;;;AAE3B,QAAMC,gBAAgB,GAAG,EAAzB;AACAH,EAAAA,GAAG,CAACxB,IAAJ,CAAS4B,SAAT,CAAmBC,OAAnB,CAA4BC,CAAD,IAAO;AAChCH,IAAAA,gBAAgB,CAACG,CAAD,CAAhB,GAAsB,EAAtB;AACAL,IAAAA,UAAU,CAACI,OAAX,CAAoBtB,EAAD,IAAQ;AACzBoB,MAAAA,gBAAgB,CAACG,CAAD,CAAhB,CAAoBvB,EAApB,IAA0B,CAACiB,GAAG,CAACxB,IAAJ,CAAS+B,QAAT,CAAkBC,aAAlB,CAAgCC,IAAhC,CAAqCH,CAArC,KAA2C,EAA5C,EAAgDvB,EAAhD,KAAuD,EAAjF;AACD,KAFD;AAGD,GALD;AAOA,SAAO;AACLP,IAAAA,IAAI,EAAEwB,GAAG,CAACxB,IADL;AACW;AAChB2B,IAAAA,gBAFK;AAGLO,IAAAA,eAAe,EAAEV,GAAG,CAACxB,IAAJ,CAASmC;AAHrB,GAAP;AAKD,CAnBD;;AAqBAC,MAAM,CAACC,OAAP,GAAiBrC,IAAjB","sourcesContent":["const i18n = require('i18next')\nconst XHR = require('i18next-xhr-backend')\nconst LanguageDetector = require('i18next-browser-languagedetector')\n\nconst options = {\n  fallbackLng: 'en',\n  load: 'languageOnly', // we only provide en, de -> no region specific locals like en-US, de-DE\n\n  // have a common namespace used around the full app\n  ns: ['common'],\n  defaultNS: 'common',\n\n  debug: true, // process.env.NODE_ENV !== 'production',\n  saveMissing: true,\n\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n    formatSeparator: ',',\n    format: (value, format, lng) => {\n      if (format === 'uppercase') return value.toUpperCase()\n      return value\n    }\n  }\n}\n\n// for browser use xhr backend to load translations and browser lng detector\nif (process.browser) {\n  i18n\n    .use(XHR)\n    // .use(Cache)\n    .use(LanguageDetector)\n}\n\n// initialize if not already initialized\nif (!i18n.isInitialized) i18n.init(options)\n\n// a simple helper to getInitialProps passed on loaded i18n data\ni18n.getInitialProps = (req, namespaces) => {\n  if (!namespaces) namespaces = i18n.options.defaultNS\n  if (typeof namespaces === 'string') namespaces = [namespaces]\n\n  req.i18n.toJSON = () => {} // do not serialize i18next instance to prevent circular references on the client\n\n  const initialI18nStore = {}\n  req.i18n.languages.forEach((l) => {\n    initialI18nStore[l] = {}\n    namespaces.forEach((ns) => {\n      initialI18nStore[l][ns] = (req.i18n.services.resourceStore.data[l] || {})[ns] || {}\n    })\n  })\n\n  return {\n    i18n: req.i18n, // use the instance on req - fixed language on request (avoid issues in race conditions with lngs of different users)\n    initialI18nStore,\n    initialLanguage: req.i18n.language\n  }\n}\n\nmodule.exports = i18n\n"]},"metadata":{},"sourceType":"script"}